#!/usr/bin/env python
#############################################################
# omnivor-change-param:
#############################################################
# Written by   : Emmanuel Branlard
# Date         : 02 February 2014
# Dependencies : python
# Website      : http://vind-gitlab.win.dtu.dk/ebra/omnivor-includes
#
# License      : Feel free to modify and adapt it.
# Revisions    : see gitlab repository
# Usage        : See description below
#
#############################################################
import fileinput
import re
import sys
import os

# --------------------------------------------------------------------------------
# --- Parameters  
# --------------------------------------------------------------------------------





# --------------------------------------------------------------------------------
# --- Pseudo description
# --------------------------------------------------------------------------------
DESCRIPTION="""usage: omnivor-change-param [file] param-list

Description: change different parameters of an htc file and prints output to screen

Arguments:
    file:       an htc file (optional if input given by stdin)
    param-list: a space-separated list of the form `key=values`
                where:
                   - `values` is a comma-separated list of values, e.g.:
                           `key=value1`
                           `key=value1,value2,etc`
                   - `key`  locate the given parameter (slash-separated), e.g.:
                           `param=values`

Example:
    omnivor-change-param test.oin state_data_folder='sim'> out.oin

    cat file.oin | omnivor-change-param wsp=10 shear_format=4,0.2  > out.oin
"""


# --------------------------------------------------------------------------------
# ---  Code
# --------------------------------------------------------------------------------
pattern_omnivor_comment  = re.compile(r'(\s*)!.*') # matching comments 

def help():
    print(DESCRIPTION)
    


def change_params_omn(Stream,paramlist):
    # Checking that param list is a list of "param=values"
    param_check=all([p.find('=')>0 for p in paramlist])
    if not param_check:
        sys.stderr.write('ERROR: param-list has the wrong format:\n'+str(paramlist)+'\n\n')
        help()
        sys.exit(-1)
    else:
        # Splitting the parameter=value list
        param_split   = [p.split('=') for p in paramlist]
        param_value   = [p[1].strip() for p in param_split]
        param_name   = [p[0].strip() for p in param_split]

        # Processing input line by line
        for line in Stream:
            l=line.strip()

            if pattern_omnivor_comment.match(l) or len(l)==0:
                # line of comments are discarded
                pass
            else:
                # Saving line indentation
                n_indent= len(line)-len(line.lstrip()); # number of identating space
                # Breaking line into parameters and comment
                ic=l.find('!')
                if (ic>0):
                    params  =l[0:ic].strip()
                    comments=l[ic:]
                else:
                    params=l.strip()
                    comments=''
                # Spliting words
                words=params.split('=')

                # looping on all param names to see if the current line match one of them
                found=None
                for p,v,ip in zip(param_name,param_value,range(len(param_name))):
                    if words[0]==p:
                        if len(words)>1:
                            words[1]=v
                            # reconstructing input
                            line=' '*n_indent+'='.join(words)+' '+comments
                            #
                            found=ip
                        #
                        break

                # We remove the param that has been found
                if found is not None:
                    param_name.pop(found)
                    param_value.pop(found)


            # writing to standard output
            sys.stdout.write(line.rstrip()+'\n')

        if len(param_name)>0:
            sys.stderr.write('ERROR: the following parameters could not be replaced: %s\n'% param_name)
            sys.exit(-1)



if __name__ == "__main__":
    #############################################################
    # Parsing arguments
    #############################################################
#     # Configure argument parser
#     parser = argparse.ArgumentParser(formatter_class=argparse.RawDescriptionHelpFormatter,description=DESCRIPTION)
#     parser.add_argument('user', nargs='?', help='USER: /home/USER/.bash_history will be cleaned')
#     args = parser.parse_args()
# 
#     ## show values ##
#     if args.user==None:

    if len(sys.argv)>1:
        if os.path.isfile(sys.argv[1]):
            if len(sys.argv)>2:
                #print('Using input file: '+sys.argv[1])
                Stream=fileinput.input(sys.argv[1]);
                change_params_omn(Stream,sys.argv[2:])
            else:
                sys.stderr.write('ERROR: not enough input arguments\n')
                help()
                sys.exit(-1)
        else:
            #print('Reading from stdin')
            Stream=fileinput.input('-');
            change_params_omn(Stream,sys.argv[1:])

    
    else:
        sys.stderr.write('ERROR: not enough input arguments\n')
        help()
        sys.exit(-1)
    
